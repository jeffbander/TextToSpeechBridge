// app.js

const express = require('express');
const twilio = require('twilio');
const axios = require('axios');
const { Readable } = require('stream');
require('dotenv').config();

const app = express();
app.use(express.urlencoded({ extended: false }));

const twilioClient = twilio(
  process.env.TWILIO_ACCOUNT_SID,
  process.env.TWILIO_AUTH_TOKEN
);

// Patient phone list
const patients = [
  { name: 'John Doe', phone: '+1XXXXXXXXXX' },
  // Add more patients as needed
];

// Route to trigger outbound call
app.get('/call/:index', async (req, res) => {
  const index = parseInt(req.params.index);
  const patient = patients[index];
  if (!patient) return res.status(404).send('Patient not found');

  await twilioClient.calls.create({
    url: 'https://your-replit-url.replit.app/voice',
    to: patient.phone,
    from: process.env.TWILIO_PHONE_NUMBER,
  });

  res.send(`Calling ${patient.name}`);
});

// Twilio webhook for voice call
app.post('/voice', (req, res) => {
  const twiml = new twilio.twiml.VoiceResponse();

  twiml.say(
    { voice: 'Polly.Joanna' },
    'Hello, this is your Mount Sinai cardiology follow-up assistant. How are you feeling today?'
  );

  twiml.record({
    transcribe: true,
    transcribeCallback: '/analyze',
    maxLength: 15,
    timeout: 5,
  });

  res.type('text/xml');
  res.send(twiml.toString());
});

// Transcription webhook to analyze patient response
app.post('/analyze', express.urlencoded({ extended: false }), async (req, res) => {
  const transcript = req.body.TranscriptionText;
  console.log('Patient said:', transcript);

  // GPT-4o Prompt
  const prompt = `A patient was just asked how they're feeling. They said: "${transcript}". Based on this, briefly assess their status. Flag if they mention any of the following: chest pain, shortness of breath, dizziness, or weakness.`;

  const gptResponse = await axios.post(
    'https://api.openai.com/v1/chat/completions',
    {
      model: 'gpt-4o',
      messages: [{ role: 'user', content: prompt }],
    },
    {
      headers: {
        Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,
        'Content-Type': 'application/json',
      },
    }
  );

  console.log('GPT-4o assessment:', gptResponse.data.choices[0].message.content);

  res.sendStatus(200);
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => console.log(`Server running on port ${PORT}`));
